{"errors": [], "interfile_languages_used": [], "paths": {"scanned": ["demo/src/dummyapp.py"]}, "results": [{"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 26, "line": 32, "offset": 876}, "extra": {"engine_kind": "OSS", "fingerprint": "e03a464b0916c1ae12fddd223d30c8ed4b70a51fac46a14355e55c00fa33ebf788f57a2dfff49f94d67ef1bedf5dbdba526a9ed10a8c1911a8282998eaf4490e_0", "is_ignored": false, "lines": "    username = request.args.get('username')\n    password = request.args.get('password')\n    \n    conn = get_db_connection()\n    cursor = conn.cursor()\n    \n    # Vulnerable to SQL injection\n    query = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"\n    cursor.execute(query)", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 11, "line": 32, "offset": 861}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 28, "offset": 722}, "svalue_start": {"col": 14, "line": 28, "offset": 709}}, "start": {"col": 5, "line": 32, "offset": 855}}, "$DATA": {"abstract_content": "username", "end": {"col": 13, "line": 24, "offset": 584}, "start": {"col": 5, "line": 24, "offset": 576}}, "$FUNC": {"abstract_content": "login", "end": {"col": 10, "line": 23, "offset": 568}, "start": {"col": 5, "line": 23, "offset": 563}}, "$INTERM": {"abstract_content": "query", "end": {"col": 10, "line": 31, "offset": 771}, "start": {"col": 5, "line": 31, "offset": 766}}, "$W": {"abstract_content": "args", "end": {"col": 28, "line": 24, "offset": 599}, "start": {"col": 24, "line": 24, "offset": 595}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 24, "offset": 576}}, {"check_id": "python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "end": {"col": 26, "line": 32, "offset": 876}, "extra": {"engine_kind": "OSS", "fingerprint": "fdb45a394d61c7a67b338dce00186216603e1b2d4da78049070ec5cc8cf36ac5e93bb9d783f94ab686a10e132f5875097b8bc2ca29e2ba4dcce414674cbb5a10_0", "is_ignored": false, "lines": "    password = request.args.get('password')\n    \n    conn = get_db_connection()\n    cursor = conn.cursor()\n    \n    # Vulnerable to SQL injection\n    query = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"\n    cursor.execute(query)", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9512, "rule_id": "2ZUbDL", "rv_id": 834453, "url": "https://semgrep.dev/playground/r/A8T3lj2/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "version_id": "A8T3lj2"}}, "shortlink": "https://sg.run/qx7y", "source": "https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CURSOR": {"abstract_content": "cursor", "end": {"col": 11, "line": 32, "offset": 861}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 27, "line": 28, "offset": 722}, "svalue_start": {"col": 14, "line": 28, "offset": 709}}, "start": {"col": 5, "line": 32, "offset": 855}}, "$DATA": {"abstract_content": "password", "end": {"col": 13, "line": 25, "offset": 628}, "start": {"col": 5, "line": 25, "offset": 620}}, "$FUNC": {"abstract_content": "login", "end": {"col": 10, "line": 23, "offset": 568}, "start": {"col": 5, "line": 23, "offset": 563}}, "$INTERM": {"abstract_content": "query", "end": {"col": 10, "line": 31, "offset": 771}, "start": {"col": 5, "line": 31, "offset": 766}}, "$W": {"abstract_content": "args", "end": {"col": 28, "line": 25, "offset": 643}, "start": {"col": 24, "line": 25, "offset": 639}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 25, "offset": 620}}, {"check_id": "python.flask.security.injection.tainted-sql-string.tainted-sql-string", "end": {"col": 89, "line": 31, "offset": 850}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 13, "line": 24, "offset": 584}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 24, "offset": 576}}}], "taint_sink": ["CliLoc", [{"end": {"col": 89, "line": 31, "offset": 850}, "path": "demo/src/dummyapp.py", "start": {"col": 13, "line": 31, "offset": 774}}, "f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\""]], "taint_source": ["CliLoc", [{"end": {"col": 28, "line": 24, "offset": 599}, "path": "demo/src/dummyapp.py", "start": {"col": 16, "line": 24, "offset": 587}}, "request.args"]]}, "engine_kind": "OSS", "fingerprint": "b4eef3e24a2d73ef7d175f282bcd378d246402e39579f7a1ce45444e6c930fbae8d84a7a0f40f61df0fef257687103f732e3368fd0218ebf41d9058a3f827396_0", "is_ignored": false, "lines": "    query = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-704: Incorrect Type Conversion or Cast"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14702, "rule_id": "YGUDKQ", "rv_id": 834494, "url": "https://semgrep.dev/playground/r/d6TKgrG/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "version_id": "d6TKgrG"}}, "shortlink": "https://sg.run/JxZj", "source": "https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string", "subcategory": ["vuln"], "technology": ["sqlalchemy", "flask"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$1": {"abstract_content": "SELECT", "end": {"col": 7, "line": 1, "offset": 6}, "start": {"col": 1, "line": 1, "offset": 0}}, "$ANYTHING": {"abstract_content": "args", "end": {"col": 28, "line": 24, "offset": 599}, "start": {"col": 24, "line": 24, "offset": 595}}, "$SQLSTR": {"abstract_content": "SELECT * FROM users WHERE username='", "end": {"col": 51, "line": 31, "offset": 812}, "start": {"col": 15, "line": 31, "offset": 776}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 13, "line": 31, "offset": 774}}, {"check_id": "python.flask.db.generic-sql-flask.generic-sql-flask", "end": {"col": 25, "line": 32, "offset": 875}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 13, "line": 24, "offset": 584}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 24, "offset": 576}}}, {"content": "query", "location": {"end": {"col": 10, "line": 31, "offset": 771}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 31, "offset": 766}}}], "taint_sink": ["CliLoc", [{"end": {"col": 25, "line": 32, "offset": 875}, "path": "demo/src/dummyapp.py", "start": {"col": 20, "line": 32, "offset": 870}}, "query"]], "taint_source": ["CliLoc", [{"end": {"col": 44, "line": 24, "offset": 615}, "path": "demo/src/dummyapp.py", "start": {"col": 16, "line": 24, "offset": 587}}, "request.args.get('username')"]]}, "engine_kind": "OSS", "fingerprint": "85a8bee6af8b305213474cd8ac72707e71a4369225015c8d686a01c4df29661e41861cf61ea4e5ef7e7cdc92abd08d4c6dc99bc506c31548fbb1c1d1737d5c28_0", "is_ignored": false, "lines": "    cursor.execute(query)", "message": "Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2020-top25": true, "cwe2021-top25": true, "cwe2022-top25": true, "functional-categories": ["db::sink::sql-or-nosql-query::aiomysql", "db::sink::sql-or-nosql-query::aiopg", "db::sink::sql-or-nosql-query::mysql-connector", "db::sink::sql-or-nosql-query::mysqldb", "db::sink::sql-or-nosql-query::pep249", "db::sink::sql-or-nosql-query::psycopg2", "db::sink::sql-or-nosql-query::pymssql", "db::sink::sql-or-nosql-query::pymysql", "db::sink::sql-or-nosql-query::pyodbc", "web::source::cookie::flask", "web::source::form-data::flask", "web::source::form-data::flask-wtf", "web::source::form-data::wtforms", "web::source::header::flask", "web::source::http-body::flask", "web::source::http-params::flask", "web::source::url-path-params::flask"], "impact": "HIGH", "license": "Copyright 2023 Semgrep, Inc.", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "pro_rules", "r_id": 116506, "rule_id": "0oULG2d", "rv_id": 904875, "url": "https://semgrep.dev/playground/r/pZTbden/python.flask.db.generic-sql-flask.generic-sql-flask", "version_id": "pZTbden"}}, "shortlink": "https://sg.run/AbKXQ", "source": "https://semgrep.dev/r/python.flask.db.generic-sql-flask.generic-sql-flask", "subcategory": ["vuln"], "technology": ["aiomysql", "aiopg", "db-api", "flask", "flask-wtf", "mssql", "mysql", "mysql-connector", "mysqldb", "pep249", "postgres", "psycopg2", "pymssql", "pymysql", "pyodbc", "sql", "web", "wtforms"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$1": {"abstract_content": "args", "end": {"col": 5, "line": 1, "offset": 4}, "start": {"col": 1, "line": 1, "offset": 0}}, "$AIOMYSQL_CURSOR": {"abstract_content": "conn.cursor()", "end": {"col": 27, "line": 28, "offset": 722}, "start": {"col": 14, "line": 28, "offset": 709}}, "$PROPERTY": {"abstract_content": "args", "end": {"col": 28, "line": 24, "offset": 599}, "start": {"col": 24, "line": 24, "offset": 595}}, "$SINK": {"abstract_content": "query", "end": {"col": 25, "line": 32, "offset": 875}, "propagated_value": {"svalue_abstract_content": "f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"", "svalue_end": {"col": 89, "line": 31, "offset": 850}, "svalue_start": {"col": 13, "line": 31, "offset": 774}}, "start": {"col": 20, "line": 32, "offset": 870}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 20, "line": 32, "offset": 870}}, {"check_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "end": {"col": 38, "line": 39, "offset": 1011}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 13, "line": 24, "offset": 584}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 24, "offset": 576}}}], "taint_sink": ["CliLoc", [{"end": {"col": 38, "line": 39, "offset": 1011}, "path": "demo/src/dummyapp.py", "start": {"col": 9, "line": 39, "offset": 982}}, "return f\"Welcome {username}!\""]], "taint_source": ["CliLoc", [{"end": {"col": 44, "line": 24, "offset": 615}, "path": "demo/src/dummyapp.py", "start": {"col": 16, "line": 24, "offset": 587}}, "request.args.get('username')"]]}, "engine_kind": "OSS", "fingerprint": "babc5e12b8a3765aa6b292fbc07947825755a8ef203a0ef83775983593273e5596e3ce2f25dde92ecdaf40847a576c05508c6cb50f0fd37c61cfad9c5e8f2146_0", "is_ignored": false, "lines": "        return f\"Welcome {username}!\"", "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9535, "rule_id": "QrUz49", "rv_id": 834474, "url": "https://semgrep.dev/playground/r/YDTlbpZ/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "version_id": "YDTlbpZ"}}, "shortlink": "https://sg.run/Zv6o", "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$FUNC": {"abstract_content": "args", "end": {"col": 28, "line": 24, "offset": 599}, "start": {"col": 24, "line": 24, "offset": 595}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 9, "line": 39, "offset": 982}}, {"check_id": "python.lang.security.dangerous-system-call.dangerous-system-call", "end": {"col": 31, "line": 49, "offset": 1253}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "ip", "location": {"end": {"col": 7, "line": 45, "offset": 1122}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 45, "offset": 1120}}}, {"content": "command", "location": {"end": {"col": 12, "line": 48, "offset": 1202}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 48, "offset": 1195}}}], "taint_sink": ["CliLoc", [{"end": {"col": 31, "line": 49, "offset": 1253}, "path": "demo/src/dummyapp.py", "start": {"col": 14, "line": 49, "offset": 1236}}, "os.popen(command)"]], "taint_source": ["CliLoc", [{"end": {"col": 32, "line": 45, "offset": 1147}, "path": "demo/src/dummyapp.py", "start": {"col": 10, "line": 45, "offset": 1125}}, "request.args.get('ip')"]]}, "engine_kind": "OSS", "fingerprint": "d040f9654c381c646dfcd8cd0cb14362d91c7464f810dca6cc48b831a1347245588d7e4892de2e6db938591523989d62cc440c416d265bec955c0b2077c3ea6a_0", "is_ignored": false, "lines": "    output = os.popen(command).read()", "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "metadata": {"asvs": {"control_id": "5.2.4 Dyanmic Code Execution Features", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 27272, "rule_id": "5rUoP1", "rv_id": 834660, "url": "https://semgrep.dev/playground/r/K3TrL49/python.lang.security.dangerous-system-call.dangerous-system-call", "version_id": "K3TrL49"}}, "shortlink": "https://sg.run/k0W7", "source": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call", "source-rule-url": "https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html", "subcategory": ["vuln"], "technology": ["python"], "vulnerability_class": ["Command Injection"]}, "metavars": {}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 14, "line": 49, "offset": 1236}}, {"check_id": "python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "end": {"col": 34, "line": 52, "offset": 1323}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "ip", "location": {"end": {"col": 7, "line": 45, "offset": 1122}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 45, "offset": 1120}}}, {"content": "command", "location": {"end": {"col": 12, "line": 48, "offset": 1202}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 48, "offset": 1195}}}, {"content": "output", "location": {"end": {"col": 11, "line": 49, "offset": 1233}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 49, "offset": 1227}}}], "taint_sink": ["CliLoc", [{"end": {"col": 34, "line": 52, "offset": 1323}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 52, "offset": 1294}}, "return f\"<pre>{output}</pre>\""]], "taint_source": ["CliLoc", [{"end": {"col": 32, "line": 45, "offset": 1147}, "path": "demo/src/dummyapp.py", "start": {"col": 10, "line": 45, "offset": 1125}}, "request.args.get('ip')"]]}, "engine_kind": "OSS", "fingerprint": "babc5e12b8a3765aa6b292fbc07947825755a8ef203a0ef83775983593273e5596e3ce2f25dde92ecdaf40847a576c05508c6cb50f0fd37c61cfad9c5e8f2146_1", "is_ignored": false, "lines": "    return f\"<pre>{output}</pre>\"", "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 9535, "rule_id": "QrUz49", "rv_id": 834474, "url": "https://semgrep.dev/playground/r/YDTlbpZ/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "version_id": "YDTlbpZ"}}, "shortlink": "https://sg.run/Zv6o", "source": "https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$FUNC": {"abstract_content": "args", "end": {"col": 22, "line": 45, "offset": 1137}, "start": {"col": 18, "line": 45, "offset": 1133}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 52, "offset": 1294}}, {"check_id": "python.django.security.injection.raw-html-format.raw-html-format", "end": {"col": 34, "line": 52, "offset": 1323}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "ip", "location": {"end": {"col": 7, "line": 45, "offset": 1122}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 45, "offset": 1120}}}, {"content": "command", "location": {"end": {"col": 12, "line": 48, "offset": 1202}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 48, "offset": 1195}}}, {"content": "output", "location": {"end": {"col": 11, "line": 49, "offset": 1233}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 49, "offset": 1227}}}], "taint_sink": ["CliLoc", [{"end": {"col": 34, "line": 52, "offset": 1323}, "path": "demo/src/dummyapp.py", "start": {"col": 12, "line": 52, "offset": 1301}}, "f\"<pre>{output}</pre>\""]], "taint_source": ["CliLoc", [{"end": {"col": 22, "line": 45, "offset": 1137}, "path": "demo/src/dummyapp.py", "start": {"col": 10, "line": 45, "offset": 1125}}, "request.args"]]}, "engine_kind": "OSS", "fingerprint": "39a21a448ce0ebbd4fc4d47727a2ecb4acb2b6953b58e055ad9e0c8da3d02d4aa4016a8c24ce75f1327c8118ca99f7a789763a1b87210060704cf8fbaf366add_0", "is_ignored": false, "lines": "    return f\"<pre>{output}</pre>\"", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render", "https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14360, "rule_id": "2ZUPER", "rv_id": 834446, "url": "https://semgrep.dev/playground/r/3ZT3wYq/python.django.security.injection.raw-html-format.raw-html-format", "version_id": "3ZT3wYq"}}, "shortlink": "https://sg.run/oYj1", "source": "https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format", "subcategory": ["vuln"], "technology": ["django"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$ANYTHING": {"abstract_content": "args", "end": {"col": 22, "line": 45, "offset": 1137}, "start": {"col": 18, "line": 45, "offset": 1133}}, "$HTMLSTR": {"abstract_content": "<pre>", "end": {"col": 19, "line": 52, "offset": 1308}, "start": {"col": 14, "line": 52, "offset": 1303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 12, "line": 52, "offset": 1301}}, {"check_id": "python.flask.security.injection.raw-html-concat.raw-html-format", "end": {"col": 34, "line": 52, "offset": 1323}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "ip", "location": {"end": {"col": 7, "line": 45, "offset": 1122}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 45, "offset": 1120}}}, {"content": "command", "location": {"end": {"col": 12, "line": 48, "offset": 1202}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 48, "offset": 1195}}}, {"content": "output", "location": {"end": {"col": 11, "line": 49, "offset": 1233}, "path": "demo/src/dummyapp.py", "start": {"col": 5, "line": 49, "offset": 1227}}}], "taint_sink": ["CliLoc", [{"end": {"col": 34, "line": 52, "offset": 1323}, "path": "demo/src/dummyapp.py", "start": {"col": 12, "line": 52, "offset": 1301}}, "f\"<pre>{output}</pre>\""]], "taint_source": ["CliLoc", [{"end": {"col": 22, "line": 45, "offset": 1137}, "path": "demo/src/dummyapp.py", "start": {"col": 10, "line": 45, "offset": 1125}}, "request.args"]]}, "engine_kind": "OSS", "fingerprint": "0fbc77778c48e483a7febe4d293c72f5de9328db46ac07c1fbc0e1b3daaf2f469b9d5ce256193bfe92bc7637f5acf5f090d2e07852fb045bb87022672cd1b93a_0", "is_ignored": false, "lines": "    return f\"<pre>{output}</pre>\"", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss"], "semgrep.dev": {"rule": {"origin": "community", "r_id": 14389, "rule_id": "GdUrJv", "rv_id": 834491, "url": "https://semgrep.dev/playground/r/O9TJ7N1/python.flask.security.injection.raw-html-concat.raw-html-format", "version_id": "O9TJ7N1"}}, "shortlink": "https://sg.run/Pb7e", "source": "https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format", "subcategory": ["vuln"], "technology": ["flask"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$ANYTHING": {"abstract_content": "args", "end": {"col": 22, "line": 45, "offset": 1137}, "start": {"col": 18, "line": 45, "offset": 1133}}, "$HTMLSTR": {"abstract_content": "<pre>", "end": {"col": 19, "line": 52, "offset": 1308}, "start": {"col": 14, "line": 52, "offset": 1303}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "demo/src/dummyapp.py", "start": {"col": 12, "line": 52, "offset": 1301}}], "skipped_rules": [], "version": "1.85.0"}