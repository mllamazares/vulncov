{
    "summary":{
        "semgrep_input_file":"demo/vulncov/semgrep_vulns.json",
        "coverage_input_file":"demo/vulncov/coverage.json",
        "uid":"e7413458-da82-44ef-8b09-5b6f99312698",
        "timestamp":"2024-09-02 14:41:57",
        "number_vulnerabilities_input":9,
        "number_vulnerabilities_matched":3
    },
    "matched_results":[
        {
            "semgrep":{
                "fingerprint":"b4eef3e24a2d73ef7d175f282bcd378d246402e39579f7a1ce45444e6c930fbae8d84a7a0f40f61df0fef257687103f732e3368fd0218ebf41d9058a3f827396_0",
                "check_id":"python.flask.security.injection.tainted-sql-string.tainted-sql-string",
                "rule_category":"security",
                "vulnerability_class":[
                    "Improper Validation"
                ],
                "impact":"MEDIUM",
                "message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.",
                "lines":"    query = f\"SELECT * FROM users WHERE username='{username}' AND password='{password}'\"",
                "vuln_lines":[
                    35
                ]
            },
            "test_cases":[
                {
                    "name":"login_test.test_login_failure",
                    "executed_lines":[
                        11,
                        12,
                        24,
                        25,
                        28,
                        31,
                        32,
                        35,
                        36,
                        38,
                        39,
                        41,
                        45
                    ],
                    "matched_lines":[
                        35
                    ],
                    "coverage_match_percentage":100.0
                },
                {
                    "name":"login_test.test_login_success",
                    "executed_lines":[
                        11,
                        12,
                        24,
                        25,
                        28,
                        31,
                        32,
                        35,
                        36,
                        38,
                        39,
                        41,
                        43
                    ],
                    "matched_lines":[
                        35
                    ],
                    "coverage_match_percentage":100.0
                }
            ]
        },
        {
            "semgrep":{
                "fingerprint":"85a8bee6af8b305213474cd8ac72707e71a4369225015c8d686a01c4df29661e41861cf61ea4e5ef7e7cdc92abd08d4c6dc99bc506c31548fbb1c1d1737d5c28_0",
                "check_id":"python.flask.db.generic-sql-flask.generic-sql-flask",
                "rule_category":"security",
                "vulnerability_class":[
                    "SQL Injection"
                ],
                "impact":"HIGH",
                "message":"Untrusted input might be used to build a database query, which can lead to a SQL injection vulnerability. An attacker can execute malicious SQL statements and gain unauthorized access to sensitive data, modify, delete data, or execute arbitrary system commands. The driver API has the ability to bind parameters to the query in a safe way. Make sure not to dynamically create SQL queries from user-influenced inputs. If you cannot avoid this, either escape the data properly or create an allowlist to check the value.",
                "lines":"    cursor.execute(query)",
                "vuln_lines":[
                    36
                ]
            },
            "test_cases":[
                {
                    "name":"login_test.test_login_failure",
                    "executed_lines":[
                        11,
                        12,
                        24,
                        25,
                        28,
                        31,
                        32,
                        35,
                        36,
                        38,
                        39,
                        41,
                        45
                    ],
                    "matched_lines":[
                        36
                    ],
                    "coverage_match_percentage":100.0
                },
                {
                    "name":"login_test.test_login_success",
                    "executed_lines":[
                        11,
                        12,
                        24,
                        25,
                        28,
                        31,
                        32,
                        35,
                        36,
                        38,
                        39,
                        41,
                        43
                    ],
                    "matched_lines":[
                        36
                    ],
                    "coverage_match_percentage":100.0
                }
            ]
        },
        {
            "semgrep":{
                "fingerprint":"babc5e12b8a3765aa6b292fbc07947825755a8ef203a0ef83775983593273e5596e3ce2f25dde92ecdaf40847a576c05508c6cb50f0fd37c61cfad9c5e8f2146_0",
                "check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string",
                "rule_category":"security",
                "vulnerability_class":[
                    "Cross-Site-Scripting (XSS)"
                ],
                "impact":"MEDIUM",
                "message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.",
                "lines":"        return f\"Welcome {username}!\"",
                "vuln_lines":[
                    43
                ]
            },
            "test_cases":[
                {
                    "name":"login_test.test_login_success",
                    "executed_lines":[
                        11,
                        12,
                        24,
                        25,
                        28,
                        31,
                        32,
                        35,
                        36,
                        38,
                        39,
                        41,
                        43
                    ],
                    "matched_lines":[
                        43
                    ],
                    "coverage_match_percentage":100.0
                }
            ]
        }
    ]
}